// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MARKETDATA_BROADCAST_H_
#define FLATBUFFERS_GENERATED_MARKETDATA_BROADCAST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace broadcast {

struct market_data;
struct market_dataBuilder;

struct md_ntf;
struct md_ntfBuilder;

struct market_data FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef market_dataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRADING_DAY = 4,
    VT_INSTRUMENT_NAME = 6,
    VT_INSTRUMENT_ID = 8,
    VT_EXCHANGE_ID = 10,
    VT_LAST_PRICE = 12,
    VT_PRE_CLOSE_PRICE = 14,
    VT_OPEN_PRICE = 16,
    VT_PRE_SETTLEMENT_PRICE = 18,
    VT_HIGHEST_PRICE = 20,
    VT_LOWEST_PRICE = 22,
    VT_CLOSE_PRICE = 24,
    VT_SETTLEMENT_PRICE = 26,
    VT_UPPER_LIMIT_PRICE = 28,
    VT_LOWER_LIMIT_PRICE = 30,
    VT_AVERAGE_PRICE = 32,
    VT_BID_PRICE1 = 34,
    VT_ASK_PRICE1 = 36,
    VT_BID_PRICE2 = 38,
    VT_ASK_PRICE2 = 40,
    VT_BID_PRICE3 = 42,
    VT_ASK_PRICE3 = 44,
    VT_BID_PRICE4 = 46,
    VT_ASK_PRICE4 = 48,
    VT_BID_PRICE5 = 50,
    VT_ASK_PRICE5 = 52,
    VT_BID_VOLUMN1 = 54,
    VT_ASK_VOLUMN1 = 56,
    VT_BID_VOLUMN2 = 58,
    VT_ASK_VOLUMN2 = 60,
    VT_BID_VOLUMN3 = 62,
    VT_ASK_VOLUMN3 = 64,
    VT_BID_VOLUMN4 = 66,
    VT_ASK_VOLUMN4 = 68,
    VT_BID_VOLUMN5 = 70,
    VT_ASK_VOLUMN5 = 72,
    VT_VOLUME = 74,
    VT_PRE_OPEN_INTEREST = 76,
    VT_OPEN_INTEREST = 78,
    VT_TRADING_VOLUMN = 80,
    VT_TURNOVER = 82,
    VT_ACTION_TIME = 84,
    VT_ACTION_MS = 86
  };
  const ::flatbuffers::String *trading_day() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRADING_DAY);
  }
  const ::flatbuffers::String *instrument_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT_NAME);
  }
  const ::flatbuffers::String *instrument_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT_ID);
  }
  const ::flatbuffers::String *exchange_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXCHANGE_ID);
  }
  float last_price() const {
    return GetField<float>(VT_LAST_PRICE, 0.0f);
  }
  float pre_close_price() const {
    return GetField<float>(VT_PRE_CLOSE_PRICE, 0.0f);
  }
  float open_price() const {
    return GetField<float>(VT_OPEN_PRICE, 0.0f);
  }
  float pre_settlement_price() const {
    return GetField<float>(VT_PRE_SETTLEMENT_PRICE, 0.0f);
  }
  float highest_price() const {
    return GetField<float>(VT_HIGHEST_PRICE, 0.0f);
  }
  float lowest_price() const {
    return GetField<float>(VT_LOWEST_PRICE, 0.0f);
  }
  float close_price() const {
    return GetField<float>(VT_CLOSE_PRICE, 0.0f);
  }
  float settlement_price() const {
    return GetField<float>(VT_SETTLEMENT_PRICE, 0.0f);
  }
  float upper_limit_price() const {
    return GetField<float>(VT_UPPER_LIMIT_PRICE, 0.0f);
  }
  float lower_limit_price() const {
    return GetField<float>(VT_LOWER_LIMIT_PRICE, 0.0f);
  }
  float average_price() const {
    return GetField<float>(VT_AVERAGE_PRICE, 0.0f);
  }
  float bid_price1() const {
    return GetField<float>(VT_BID_PRICE1, 0.0f);
  }
  float ask_price1() const {
    return GetField<float>(VT_ASK_PRICE1, 0.0f);
  }
  float bid_price2() const {
    return GetField<float>(VT_BID_PRICE2, 0.0f);
  }
  float ask_price2() const {
    return GetField<float>(VT_ASK_PRICE2, 0.0f);
  }
  float bid_price3() const {
    return GetField<float>(VT_BID_PRICE3, 0.0f);
  }
  float ask_price3() const {
    return GetField<float>(VT_ASK_PRICE3, 0.0f);
  }
  float bid_price4() const {
    return GetField<float>(VT_BID_PRICE4, 0.0f);
  }
  float ask_price4() const {
    return GetField<float>(VT_ASK_PRICE4, 0.0f);
  }
  float bid_price5() const {
    return GetField<float>(VT_BID_PRICE5, 0.0f);
  }
  float ask_price5() const {
    return GetField<float>(VT_ASK_PRICE5, 0.0f);
  }
  float bid_volumn1() const {
    return GetField<float>(VT_BID_VOLUMN1, 0.0f);
  }
  float ask_volumn1() const {
    return GetField<float>(VT_ASK_VOLUMN1, 0.0f);
  }
  float bid_volumn2() const {
    return GetField<float>(VT_BID_VOLUMN2, 0.0f);
  }
  float ask_volumn2() const {
    return GetField<float>(VT_ASK_VOLUMN2, 0.0f);
  }
  float bid_volumn3() const {
    return GetField<float>(VT_BID_VOLUMN3, 0.0f);
  }
  float ask_volumn3() const {
    return GetField<float>(VT_ASK_VOLUMN3, 0.0f);
  }
  float bid_volumn4() const {
    return GetField<float>(VT_BID_VOLUMN4, 0.0f);
  }
  float ask_volumn4() const {
    return GetField<float>(VT_ASK_VOLUMN4, 0.0f);
  }
  float bid_volumn5() const {
    return GetField<float>(VT_BID_VOLUMN5, 0.0f);
  }
  float ask_volumn5() const {
    return GetField<float>(VT_ASK_VOLUMN5, 0.0f);
  }
  float volume() const {
    return GetField<float>(VT_VOLUME, 0.0f);
  }
  float pre_open_interest() const {
    return GetField<float>(VT_PRE_OPEN_INTEREST, 0.0f);
  }
  float open_interest() const {
    return GetField<float>(VT_OPEN_INTEREST, 0.0f);
  }
  float trading_volumn() const {
    return GetField<float>(VT_TRADING_VOLUMN, 0.0f);
  }
  float turnover() const {
    return GetField<float>(VT_TURNOVER, 0.0f);
  }
  const ::flatbuffers::String *action_time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTION_TIME);
  }
  int32_t action_ms() const {
    return GetField<int32_t>(VT_ACTION_MS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRADING_DAY) &&
           verifier.VerifyString(trading_day()) &&
           VerifyOffset(verifier, VT_INSTRUMENT_NAME) &&
           verifier.VerifyString(instrument_name()) &&
           VerifyOffset(verifier, VT_INSTRUMENT_ID) &&
           verifier.VerifyString(instrument_id()) &&
           VerifyOffset(verifier, VT_EXCHANGE_ID) &&
           verifier.VerifyString(exchange_id()) &&
           VerifyField<float>(verifier, VT_LAST_PRICE, 4) &&
           VerifyField<float>(verifier, VT_PRE_CLOSE_PRICE, 4) &&
           VerifyField<float>(verifier, VT_OPEN_PRICE, 4) &&
           VerifyField<float>(verifier, VT_PRE_SETTLEMENT_PRICE, 4) &&
           VerifyField<float>(verifier, VT_HIGHEST_PRICE, 4) &&
           VerifyField<float>(verifier, VT_LOWEST_PRICE, 4) &&
           VerifyField<float>(verifier, VT_CLOSE_PRICE, 4) &&
           VerifyField<float>(verifier, VT_SETTLEMENT_PRICE, 4) &&
           VerifyField<float>(verifier, VT_UPPER_LIMIT_PRICE, 4) &&
           VerifyField<float>(verifier, VT_LOWER_LIMIT_PRICE, 4) &&
           VerifyField<float>(verifier, VT_AVERAGE_PRICE, 4) &&
           VerifyField<float>(verifier, VT_BID_PRICE1, 4) &&
           VerifyField<float>(verifier, VT_ASK_PRICE1, 4) &&
           VerifyField<float>(verifier, VT_BID_PRICE2, 4) &&
           VerifyField<float>(verifier, VT_ASK_PRICE2, 4) &&
           VerifyField<float>(verifier, VT_BID_PRICE3, 4) &&
           VerifyField<float>(verifier, VT_ASK_PRICE3, 4) &&
           VerifyField<float>(verifier, VT_BID_PRICE4, 4) &&
           VerifyField<float>(verifier, VT_ASK_PRICE4, 4) &&
           VerifyField<float>(verifier, VT_BID_PRICE5, 4) &&
           VerifyField<float>(verifier, VT_ASK_PRICE5, 4) &&
           VerifyField<float>(verifier, VT_BID_VOLUMN1, 4) &&
           VerifyField<float>(verifier, VT_ASK_VOLUMN1, 4) &&
           VerifyField<float>(verifier, VT_BID_VOLUMN2, 4) &&
           VerifyField<float>(verifier, VT_ASK_VOLUMN2, 4) &&
           VerifyField<float>(verifier, VT_BID_VOLUMN3, 4) &&
           VerifyField<float>(verifier, VT_ASK_VOLUMN3, 4) &&
           VerifyField<float>(verifier, VT_BID_VOLUMN4, 4) &&
           VerifyField<float>(verifier, VT_ASK_VOLUMN4, 4) &&
           VerifyField<float>(verifier, VT_BID_VOLUMN5, 4) &&
           VerifyField<float>(verifier, VT_ASK_VOLUMN5, 4) &&
           VerifyField<float>(verifier, VT_VOLUME, 4) &&
           VerifyField<float>(verifier, VT_PRE_OPEN_INTEREST, 4) &&
           VerifyField<float>(verifier, VT_OPEN_INTEREST, 4) &&
           VerifyField<float>(verifier, VT_TRADING_VOLUMN, 4) &&
           VerifyField<float>(verifier, VT_TURNOVER, 4) &&
           VerifyOffset(verifier, VT_ACTION_TIME) &&
           verifier.VerifyString(action_time()) &&
           VerifyField<int32_t>(verifier, VT_ACTION_MS, 4) &&
           verifier.EndTable();
  }
};

struct market_dataBuilder {
  typedef market_data Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_trading_day(::flatbuffers::Offset<::flatbuffers::String> trading_day) {
    fbb_.AddOffset(market_data::VT_TRADING_DAY, trading_day);
  }
  void add_instrument_name(::flatbuffers::Offset<::flatbuffers::String> instrument_name) {
    fbb_.AddOffset(market_data::VT_INSTRUMENT_NAME, instrument_name);
  }
  void add_instrument_id(::flatbuffers::Offset<::flatbuffers::String> instrument_id) {
    fbb_.AddOffset(market_data::VT_INSTRUMENT_ID, instrument_id);
  }
  void add_exchange_id(::flatbuffers::Offset<::flatbuffers::String> exchange_id) {
    fbb_.AddOffset(market_data::VT_EXCHANGE_ID, exchange_id);
  }
  void add_last_price(float last_price) {
    fbb_.AddElement<float>(market_data::VT_LAST_PRICE, last_price, 0.0f);
  }
  void add_pre_close_price(float pre_close_price) {
    fbb_.AddElement<float>(market_data::VT_PRE_CLOSE_PRICE, pre_close_price, 0.0f);
  }
  void add_open_price(float open_price) {
    fbb_.AddElement<float>(market_data::VT_OPEN_PRICE, open_price, 0.0f);
  }
  void add_pre_settlement_price(float pre_settlement_price) {
    fbb_.AddElement<float>(market_data::VT_PRE_SETTLEMENT_PRICE, pre_settlement_price, 0.0f);
  }
  void add_highest_price(float highest_price) {
    fbb_.AddElement<float>(market_data::VT_HIGHEST_PRICE, highest_price, 0.0f);
  }
  void add_lowest_price(float lowest_price) {
    fbb_.AddElement<float>(market_data::VT_LOWEST_PRICE, lowest_price, 0.0f);
  }
  void add_close_price(float close_price) {
    fbb_.AddElement<float>(market_data::VT_CLOSE_PRICE, close_price, 0.0f);
  }
  void add_settlement_price(float settlement_price) {
    fbb_.AddElement<float>(market_data::VT_SETTLEMENT_PRICE, settlement_price, 0.0f);
  }
  void add_upper_limit_price(float upper_limit_price) {
    fbb_.AddElement<float>(market_data::VT_UPPER_LIMIT_PRICE, upper_limit_price, 0.0f);
  }
  void add_lower_limit_price(float lower_limit_price) {
    fbb_.AddElement<float>(market_data::VT_LOWER_LIMIT_PRICE, lower_limit_price, 0.0f);
  }
  void add_average_price(float average_price) {
    fbb_.AddElement<float>(market_data::VT_AVERAGE_PRICE, average_price, 0.0f);
  }
  void add_bid_price1(float bid_price1) {
    fbb_.AddElement<float>(market_data::VT_BID_PRICE1, bid_price1, 0.0f);
  }
  void add_ask_price1(float ask_price1) {
    fbb_.AddElement<float>(market_data::VT_ASK_PRICE1, ask_price1, 0.0f);
  }
  void add_bid_price2(float bid_price2) {
    fbb_.AddElement<float>(market_data::VT_BID_PRICE2, bid_price2, 0.0f);
  }
  void add_ask_price2(float ask_price2) {
    fbb_.AddElement<float>(market_data::VT_ASK_PRICE2, ask_price2, 0.0f);
  }
  void add_bid_price3(float bid_price3) {
    fbb_.AddElement<float>(market_data::VT_BID_PRICE3, bid_price3, 0.0f);
  }
  void add_ask_price3(float ask_price3) {
    fbb_.AddElement<float>(market_data::VT_ASK_PRICE3, ask_price3, 0.0f);
  }
  void add_bid_price4(float bid_price4) {
    fbb_.AddElement<float>(market_data::VT_BID_PRICE4, bid_price4, 0.0f);
  }
  void add_ask_price4(float ask_price4) {
    fbb_.AddElement<float>(market_data::VT_ASK_PRICE4, ask_price4, 0.0f);
  }
  void add_bid_price5(float bid_price5) {
    fbb_.AddElement<float>(market_data::VT_BID_PRICE5, bid_price5, 0.0f);
  }
  void add_ask_price5(float ask_price5) {
    fbb_.AddElement<float>(market_data::VT_ASK_PRICE5, ask_price5, 0.0f);
  }
  void add_bid_volumn1(float bid_volumn1) {
    fbb_.AddElement<float>(market_data::VT_BID_VOLUMN1, bid_volumn1, 0.0f);
  }
  void add_ask_volumn1(float ask_volumn1) {
    fbb_.AddElement<float>(market_data::VT_ASK_VOLUMN1, ask_volumn1, 0.0f);
  }
  void add_bid_volumn2(float bid_volumn2) {
    fbb_.AddElement<float>(market_data::VT_BID_VOLUMN2, bid_volumn2, 0.0f);
  }
  void add_ask_volumn2(float ask_volumn2) {
    fbb_.AddElement<float>(market_data::VT_ASK_VOLUMN2, ask_volumn2, 0.0f);
  }
  void add_bid_volumn3(float bid_volumn3) {
    fbb_.AddElement<float>(market_data::VT_BID_VOLUMN3, bid_volumn3, 0.0f);
  }
  void add_ask_volumn3(float ask_volumn3) {
    fbb_.AddElement<float>(market_data::VT_ASK_VOLUMN3, ask_volumn3, 0.0f);
  }
  void add_bid_volumn4(float bid_volumn4) {
    fbb_.AddElement<float>(market_data::VT_BID_VOLUMN4, bid_volumn4, 0.0f);
  }
  void add_ask_volumn4(float ask_volumn4) {
    fbb_.AddElement<float>(market_data::VT_ASK_VOLUMN4, ask_volumn4, 0.0f);
  }
  void add_bid_volumn5(float bid_volumn5) {
    fbb_.AddElement<float>(market_data::VT_BID_VOLUMN5, bid_volumn5, 0.0f);
  }
  void add_ask_volumn5(float ask_volumn5) {
    fbb_.AddElement<float>(market_data::VT_ASK_VOLUMN5, ask_volumn5, 0.0f);
  }
  void add_volume(float volume) {
    fbb_.AddElement<float>(market_data::VT_VOLUME, volume, 0.0f);
  }
  void add_pre_open_interest(float pre_open_interest) {
    fbb_.AddElement<float>(market_data::VT_PRE_OPEN_INTEREST, pre_open_interest, 0.0f);
  }
  void add_open_interest(float open_interest) {
    fbb_.AddElement<float>(market_data::VT_OPEN_INTEREST, open_interest, 0.0f);
  }
  void add_trading_volumn(float trading_volumn) {
    fbb_.AddElement<float>(market_data::VT_TRADING_VOLUMN, trading_volumn, 0.0f);
  }
  void add_turnover(float turnover) {
    fbb_.AddElement<float>(market_data::VT_TURNOVER, turnover, 0.0f);
  }
  void add_action_time(::flatbuffers::Offset<::flatbuffers::String> action_time) {
    fbb_.AddOffset(market_data::VT_ACTION_TIME, action_time);
  }
  void add_action_ms(int32_t action_ms) {
    fbb_.AddElement<int32_t>(market_data::VT_ACTION_MS, action_ms, 0);
  }
  explicit market_dataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<market_data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<market_data>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<market_data> Createmarket_data(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> trading_day = 0,
    ::flatbuffers::Offset<::flatbuffers::String> instrument_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> instrument_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> exchange_id = 0,
    float last_price = 0.0f,
    float pre_close_price = 0.0f,
    float open_price = 0.0f,
    float pre_settlement_price = 0.0f,
    float highest_price = 0.0f,
    float lowest_price = 0.0f,
    float close_price = 0.0f,
    float settlement_price = 0.0f,
    float upper_limit_price = 0.0f,
    float lower_limit_price = 0.0f,
    float average_price = 0.0f,
    float bid_price1 = 0.0f,
    float ask_price1 = 0.0f,
    float bid_price2 = 0.0f,
    float ask_price2 = 0.0f,
    float bid_price3 = 0.0f,
    float ask_price3 = 0.0f,
    float bid_price4 = 0.0f,
    float ask_price4 = 0.0f,
    float bid_price5 = 0.0f,
    float ask_price5 = 0.0f,
    float bid_volumn1 = 0.0f,
    float ask_volumn1 = 0.0f,
    float bid_volumn2 = 0.0f,
    float ask_volumn2 = 0.0f,
    float bid_volumn3 = 0.0f,
    float ask_volumn3 = 0.0f,
    float bid_volumn4 = 0.0f,
    float ask_volumn4 = 0.0f,
    float bid_volumn5 = 0.0f,
    float ask_volumn5 = 0.0f,
    float volume = 0.0f,
    float pre_open_interest = 0.0f,
    float open_interest = 0.0f,
    float trading_volumn = 0.0f,
    float turnover = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> action_time = 0,
    int32_t action_ms = 0) {
  market_dataBuilder builder_(_fbb);
  builder_.add_action_ms(action_ms);
  builder_.add_action_time(action_time);
  builder_.add_turnover(turnover);
  builder_.add_trading_volumn(trading_volumn);
  builder_.add_open_interest(open_interest);
  builder_.add_pre_open_interest(pre_open_interest);
  builder_.add_volume(volume);
  builder_.add_ask_volumn5(ask_volumn5);
  builder_.add_bid_volumn5(bid_volumn5);
  builder_.add_ask_volumn4(ask_volumn4);
  builder_.add_bid_volumn4(bid_volumn4);
  builder_.add_ask_volumn3(ask_volumn3);
  builder_.add_bid_volumn3(bid_volumn3);
  builder_.add_ask_volumn2(ask_volumn2);
  builder_.add_bid_volumn2(bid_volumn2);
  builder_.add_ask_volumn1(ask_volumn1);
  builder_.add_bid_volumn1(bid_volumn1);
  builder_.add_ask_price5(ask_price5);
  builder_.add_bid_price5(bid_price5);
  builder_.add_ask_price4(ask_price4);
  builder_.add_bid_price4(bid_price4);
  builder_.add_ask_price3(ask_price3);
  builder_.add_bid_price3(bid_price3);
  builder_.add_ask_price2(ask_price2);
  builder_.add_bid_price2(bid_price2);
  builder_.add_ask_price1(ask_price1);
  builder_.add_bid_price1(bid_price1);
  builder_.add_average_price(average_price);
  builder_.add_lower_limit_price(lower_limit_price);
  builder_.add_upper_limit_price(upper_limit_price);
  builder_.add_settlement_price(settlement_price);
  builder_.add_close_price(close_price);
  builder_.add_lowest_price(lowest_price);
  builder_.add_highest_price(highest_price);
  builder_.add_pre_settlement_price(pre_settlement_price);
  builder_.add_open_price(open_price);
  builder_.add_pre_close_price(pre_close_price);
  builder_.add_last_price(last_price);
  builder_.add_exchange_id(exchange_id);
  builder_.add_instrument_id(instrument_id);
  builder_.add_instrument_name(instrument_name);
  builder_.add_trading_day(trading_day);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<market_data> Createmarket_dataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *trading_day = nullptr,
    const char *instrument_name = nullptr,
    const char *instrument_id = nullptr,
    const char *exchange_id = nullptr,
    float last_price = 0.0f,
    float pre_close_price = 0.0f,
    float open_price = 0.0f,
    float pre_settlement_price = 0.0f,
    float highest_price = 0.0f,
    float lowest_price = 0.0f,
    float close_price = 0.0f,
    float settlement_price = 0.0f,
    float upper_limit_price = 0.0f,
    float lower_limit_price = 0.0f,
    float average_price = 0.0f,
    float bid_price1 = 0.0f,
    float ask_price1 = 0.0f,
    float bid_price2 = 0.0f,
    float ask_price2 = 0.0f,
    float bid_price3 = 0.0f,
    float ask_price3 = 0.0f,
    float bid_price4 = 0.0f,
    float ask_price4 = 0.0f,
    float bid_price5 = 0.0f,
    float ask_price5 = 0.0f,
    float bid_volumn1 = 0.0f,
    float ask_volumn1 = 0.0f,
    float bid_volumn2 = 0.0f,
    float ask_volumn2 = 0.0f,
    float bid_volumn3 = 0.0f,
    float ask_volumn3 = 0.0f,
    float bid_volumn4 = 0.0f,
    float ask_volumn4 = 0.0f,
    float bid_volumn5 = 0.0f,
    float ask_volumn5 = 0.0f,
    float volume = 0.0f,
    float pre_open_interest = 0.0f,
    float open_interest = 0.0f,
    float trading_volumn = 0.0f,
    float turnover = 0.0f,
    const char *action_time = nullptr,
    int32_t action_ms = 0) {
  auto trading_day__ = trading_day ? _fbb.CreateString(trading_day) : 0;
  auto instrument_name__ = instrument_name ? _fbb.CreateString(instrument_name) : 0;
  auto instrument_id__ = instrument_id ? _fbb.CreateString(instrument_id) : 0;
  auto exchange_id__ = exchange_id ? _fbb.CreateString(exchange_id) : 0;
  auto action_time__ = action_time ? _fbb.CreateString(action_time) : 0;
  return broadcast::Createmarket_data(
      _fbb,
      trading_day__,
      instrument_name__,
      instrument_id__,
      exchange_id__,
      last_price,
      pre_close_price,
      open_price,
      pre_settlement_price,
      highest_price,
      lowest_price,
      close_price,
      settlement_price,
      upper_limit_price,
      lower_limit_price,
      average_price,
      bid_price1,
      ask_price1,
      bid_price2,
      ask_price2,
      bid_price3,
      ask_price3,
      bid_price4,
      ask_price4,
      bid_price5,
      ask_price5,
      bid_volumn1,
      ask_volumn1,
      bid_volumn2,
      ask_volumn2,
      bid_volumn3,
      ask_volumn3,
      bid_volumn4,
      ask_volumn4,
      bid_volumn5,
      ask_volumn5,
      volume,
      pre_open_interest,
      open_interest,
      trading_volumn,
      turnover,
      action_time__,
      action_ms);
}

struct md_ntf FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef md_ntfBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<broadcast::market_data>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<broadcast::market_data>> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct md_ntfBuilder {
  typedef md_ntf Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<broadcast::market_data>>> data) {
    fbb_.AddOffset(md_ntf::VT_DATA, data);
  }
  explicit md_ntfBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<md_ntf> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<md_ntf>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<md_ntf> Createmd_ntf(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<broadcast::market_data>>> data = 0) {
  md_ntfBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<md_ntf> Createmd_ntfDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<broadcast::market_data>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<broadcast::market_data>>(*data) : 0;
  return broadcast::Createmd_ntf(
      _fbb,
      data__);
}

inline const broadcast::md_ntf *Getmd_ntf(const void *buf) {
  return ::flatbuffers::GetRoot<broadcast::md_ntf>(buf);
}

inline const broadcast::md_ntf *GetSizePrefixedmd_ntf(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<broadcast::md_ntf>(buf);
}

inline bool Verifymd_ntfBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<broadcast::md_ntf>(nullptr);
}

inline bool VerifySizePrefixedmd_ntfBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<broadcast::md_ntf>(nullptr);
}

inline void Finishmd_ntfBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<broadcast::md_ntf> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedmd_ntfBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<broadcast::md_ntf> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace broadcast

#endif  // FLATBUFFERS_GENERATED_MARKETDATA_BROADCAST_H_
